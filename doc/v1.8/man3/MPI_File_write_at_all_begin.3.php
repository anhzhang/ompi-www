<?php
$topdir = "../../..";
$title = "MPI_File_write_at_all_begin(3) man page (version 1.8.4)";
$meta_desc = "Open MPI v1.8.4 man page: MPI_FILE_WRITE_AT_ALL_BEGIN(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
      <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>
<b>MPI_File_write_at_all_begin</b> - Writes a file at explicitly s
pecified
offsets; beginning part of a
split
collective routine (nonblocking).
<p>

<h2><a name='sect1' href='#toc1'>Syntax</a></h2>
<br>
<pre>C Syntax
    #include &lt;mpi.h&gt;
    int MPI_File_write_at_all_begin(MPI_File fh, MPI_Offset
offset,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;      const void *buf, int count, MPI_Datatype dat
atype)
</pre>
<h2><a name='sect2' href='#toc2'>Fortran Syntax (see FORTRAN 77 NOTES)</a></h2>
<br>
<pre>    INCLUDE &rsquo;mpif.h&rsquo;
    MPI_FILE_WRITE_AT_ALL_BEGIN(FH, OFFSET, BUF,
 COUNT, DATATYPE, IERRO
R)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;&lt;TYPE&gt; BUF(*)
        <tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER<tt> </tt>&nbsp;<tt> </tt>&nbsp;FH, COUNT, DATATYPE, IERROR
<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER(KIND=MPI_OFFSET_KIND) OFFSET
</pre>
<h2><a name='sect3' href='#toc3'>C++ Syntax</a></h2>
<br>
<pre>#include &lt;mpi.h&gt;
void MPI::File::Write_at_all_begin(MPI::Offset offset,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;const void* buf, int count,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;const MPI::Datatype&amp; datatype)
</pre>
<h2><a name='sect4' href='#toc4'>Input/Output Parameter</a></h2>

<dl>

<dt>fh     </dt>
<dd>File handle (handle).
<p> </dd>
</dl>

<h2><a name='sect5' href='#toc5'>Input Parameters</a></h2>

<dl>

<dt>offset
</dt>
<dd>File offset (handle). </dd>

<dt>buf </dt>
<dd>Initial address of buffer (choice). </dd>

<dt>count </dt>
<dd>Number
of elements in buffer (integer). </dd>

<dt>datatype </dt>
<dd>Data type of each buffer element
(handle).
<p> </dd>
</dl>

<h2><a name='sect6' href='#toc6'>Output Parameter</a></h2>

<dl>

<dt>IERROR </dt>
<dd>Fortran only: Error status (integer).

<p> </dd>
</dl>

<h2><a name='sect7' href='#toc7'>Description</a></h2>
MPI_File_write_at_all_begin is the beginning part of a split
colle
ctive, that is, a nonblocking routine
that a
ttempts to write into
the file associa
ted with  <i>fh</i> (at the  <i>offset</i>  position) a total number
of  <i>count</i>  data items having <i>datatype</i>  type from the user&rsquo;s buffer  <i>buf.</i>
The offset is in etype units relative to the current view. That is
, holes
are not counted when locating an offset. The data is written into those
parts of t
he file specified by the current view.
<p>
<h2><a name='sect8' href='#toc8'>Fortran 77 Notes</a></h2>
The
MPI standard prescribes portable Fortran syntax for the <i>OFFSET</i> argument
only for Fortran 90.  FORTRAN 77 users may use the non-portable syntax <p>
<br>
<pre>     INTEGER*MPI_OFFSET_KIND OFFSET
</pre><p>
where MPI_OFFSET_KIND is a constant defined in mpif.h and gives the length
of the declared integer in bytes.
<p>
<h2><a name='sect9' href='#toc9'>Notes</a></h2>
All the nonblocking collective routines
for data access are "split
" into two routines, each with _begin
or _en
d
as a suffix. These split collective
routines are subject to the semantic
rules described i
n Section 9.4.5 of the
 MPI-2 standard.
<p>
<h2><a name='sect10' href='#toc10'>Errors</a></h2>
Almost all
MPI routines return an error value; C routines as the v
alue of the function
and Fortran routi
nes in
 the last argument. C++ functions do n
ot return
errors. If the default error handler is set
to MPI::ERRORS_THROW_E
XCEPTIONS,
then on error the C
++ exception m
echanism will
be used to throw an MPI::Exception
object. <p>
Before the error value is returned, the current MPI error handler

is called. For MPI I/O function errors, the default error handler is
set
to MPI_ERRORS_RETURN. The error ha
ndler
may be changed with MPI_File_set_errha
ndler;
the predefined error handler MPI_ERRORS_ARE_FAT
AL may be used to make

I/O errors fatal. Note that M
PI does not gu
arantee that a
n MPI program
can continue past an error.
<p> <p>

<hr><p>
<a name='toc'><b>Table of Contents</b></a><p>
<ul>
<li><a name='toc0' href='#sect0'>Name</a></li>
<li><a name='toc1' href='#sect1'>Syntax</a></li>
<li><a name='toc2' href='#sect2'>Fortran Syntax (see FORTRAN 77 NOTES)</a></li>
<li><a name='toc3' href='#sect3'>C++ Syntax</a></li>
<li><a name='toc4' href='#sect4'>Input/Output Parameter</a></li>
<li><a name='toc5' href='#sect5'>Input Parameters</a></li>
<li><a name='toc6' href='#sect6'>Output Parameter</a></li>
<li><a name='toc7' href='#sect7'>Description</a></li>
<li><a name='toc8' href='#sect8'>Fortran 77 Notes</a></li>
<li><a name='toc9' href='#sect9'>Notes</a></li>
<li><a name='toc10' href='#sect10'>Errors</a></li>
</ul>


<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
